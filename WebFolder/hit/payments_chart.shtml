<!--HIT_EXECUTE

C_TEXT(_HTMLTITLETXT)
if(_HIT_AuthenticateSession="Session-Authenticated-OK")
//_HIT_HTMLTXT:="<h1>AUTH</h1>"
_HTMLTITLETXT:="Payments Received"
else
_HIT_HTTPD_RedirectToURL ("sign-in.shtml")
end if 
-->
<!DOCTYPE html>
<html>
<head>
	
    <!--#4DSCRIPT/_HIT_LoadInclude/hit/includes/header.shtml-->
    

	<!-- <link rel="stylesheet" href="css/base/jquery-ui.css" /> -->

    <!-- this page specific styles -->
    <link rel="stylesheet" href="css/compiled/index.css" type="text/css" media="screen" />   
	
	<link rel="stylesheet" href="css/autocomplete.css" />


    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
</head>
<body style="background-color:#FFFFFF">            
<!--#4DIF (_HIT_WebApp_GetField ("view")="small")-->
   <div id="container" style="margin: 0 auto; height:280px"></div>
<!--#4DELSE-->
	<!-- main container -->
    <div style="background:#fff;">
            <div id="pad-wrapper" style="margin-top:0px;">
			
				<div class="row-fluid form-wrapper">
					<form  action="" class="form-comment" method="post" >
						
					Customer &nbsp;
					<div class="ui-widget"  style="display:inline;padding-right:20px;">
									<select id="Client_ID" name="Client_ID" >
										
										<option value=""></option>
                                        <!--#4DSCRIPT/Web_LoadCustomers/-->
                                         <!--4DLOOP  [Companies]-->
											<option value="<!--4DVAR [Companies]account_Number-->" <!--#4DIF ([Projects]client_id=[Companies]account_Number)-->selected<!--4DELSE--><!--4DENDIF-->><!--4DVAR [Companies]company_Name--></option>			
										 <!--4DENDLOOP-->  
										 
                                        </select>
								</div>
					
						<input type="button" class="btn-glow primary" value="Submit" id="btn_redraw">		
					</form>
					</div>
				
                <!-- statistics chart built with jQuery Flot -->
                <div class="row-fluid chart">
				
					<div class="btn-group pull-right">
						
						<button class="glow left" onClick="set_defaults(); draw_year_chart()" id="yearly">Year</button>
						<button class="glow middle" onClick="set_defaults(); draw_month_chart()" id="monthly">Month</button>
						<button class="glow middle" onClick="set_defaults(); draw_week_chart()" id="weekly">Week</button>
						<button class="glow right" onClick="set_defaults(); draw_day_chart()" id="daily">Day</button>
					</div>
					
					<div class="btn-group pull-left" id="weeks">
						<button class="glow left" onClick="draw_prev_chart()" id="prev">Previous</button>
						<button class="glow right active" onClick="draw_next_chart()" id="next" disabled="disabled">Next</button><br/>

					</div>
					 
					
                    <div class="span12">
					   <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
					   
                    </div>
                </div>
                <!-- end statistics chart -->
            </div>
    </div>
<!--#4DENDIF-->

	<!-- scripts -->
    <!--#4DSCRIPT/_HIT_LoadInclude/hit/includes/footer.shtml--> 
   <!-- <script src="js/ui/jquery-ui.js"></script> -->
    <script src="js/bootstrap.datepicker.js"></script>
    <script src="js/jquery.uniform.min.js"></script>
	<!-- charts -->
	<script src="https://code.highcharts.com/highcharts.js"></script>
	<script src="https://code.highcharts.com/modules/exporting.js"></script>
	
	<script src="js/no-data-to-display.src.js"></script>
		
		<script src="js/charts.js"></script>
	
	<script type="text/javascript">
	var title;
	var client_id='';
	
			
		function get_data(s_date, e_date) {
			var s_date_arr=s_date.split('/');
			var sdate=s_date_arr[1]+'/'+s_date_arr[0]+'/'+s_date_arr[2];
			var e_date_arr=e_date.split('/');
			var edate=e_date_arr[1]+'/'+e_date_arr[0]+'/'+e_date_arr[2];
			var dataString = 's_date='+sdate+'&e_date='+edate+'&loop='+loop+'&client_id='+client_id+'&mode='+mode;
			jsonRow = 'returnPayments.cgi?'+dataString;
			$.getJSON(jsonRow,function(result){
				var ib_arr=new Array();
				var active_arr=new Array();
				var dc_arr=new Array();
				var cash_arr=new Array();
				var cheque_arr=new Array();
				var paypal_arr=new Array();
				
				var hours_arr=new Array();

				var total_payments=0;
				
				$.each(result, function(i,item)
				{
					var ib=Math.round(item.IntBnk * 100)/100;
					ib_arr.push(ib);
					
					var active=Math.round(item.Bacs * 100)/100;
					active_arr.push(active);
					
					var dc=Math.round(item.DebitCredit * 100)/100;
					dc_arr.push(dc);
					
					var cash=Math.round(item.Cash * 100)/100;
					cash_arr.push(cash);
					
					var cheque=Math.round(item.Cheque * 100)/100;
					cheque_arr.push(cheque);
					
					var paypal=Math.round(item.PayPal * 100)/100;
					paypal_arr.push(paypal);
					
					total_payments+= ib+active+dc+cash+cheque+paypal;
					
					var hour_date_arr=item.Date_Time.split('/');
					var hour_date=new Date(Number(hour_date_arr[2]), Number(hour_date_arr[1])-1, Number(hour_date_arr[0]));
					if(mode=='month' || mode=='week') {
						hours_arr.push(hour_date.getDate()+' '+getMonthName(hour_date.getMonth()+1));
					}
					else{
						hours_arr.push(hour_date.getDate()+' '+getMonthName(hour_date.getMonth()+1));
					}
					
				});
				
				
				if(total_payments==0){
					ib_arr=new Array();
					active_arr=new Array();
					dc_arr=new Array();
					cash_arr=new Array();
					cheque_arr=new Array();
					paypal_arr=new Array();
				
					hours_arr=new Array();
				}
				
				load_chart(hours_arr,ib_arr,active_arr,dc_arr,cash_arr,cheque_arr,paypal_arr);
				//load_total_chart(pay_cats,pay_vals);
			});
		}
		
		
		function get_day_data(s_date, e_date) {
			var s_date_arr=s_date.split('/');
			var sdate=s_date_arr[1]+'/'+s_date_arr[0]+'/'+s_date_arr[2];
			var e_date_arr=e_date.split('/');
			var edate=e_date_arr[1]+'/'+e_date_arr[0]+'/'+e_date_arr[2];
			var dataString = 's_date='+sdate+'&e_date='+edate+'&client_id='+client_id;
			jsonRow = 'returnDayPayments.cgi?'+dataString;
			$.getJSON(jsonRow,function(result){
				
				var pay_cats=['International Banking', 'Bacs', 'Debit or Credit Card', 'Cash', 'Cheque', 'PayPal'];
				var pay_vals=new Array();
				var total_payments=0;
				$.each(result, function(i,item)
				{
					var ib=Math.round(item.IntBnk * 100)/100;
					pay_vals.push({y: ib, color: '#2F7ED8'});
					
					var active=Math.round(item.Bacs * 100)/100;
					pay_vals.push({y: active, color: '#0D233A'});
					
					var dc=Math.round(item.DebitCredit * 100)/100;
					pay_vals.push({y: dc, color: '#8BBC21'});
					
					var cash=Math.round(item.Cash * 100)/100;
					pay_vals.push({y: cash, color: '#910000'});
					
					var cheque=Math.round(item.Cheque * 100)/100;
					pay_vals.push({y: cheque, color: '#1AADCE'});
					
					var paypal=Math.round(item.PayPal * 100)/100;
					pay_vals.push({y: paypal, color: '#492970'});
					
					total_payments+= ib+active+dc+cash+cheque+paypal;
				});

				if(total_payments==0){
					pay_vals=new Array();
					pay_cats=new Array();
				}
				
				load_day_chart(pay_cats,pay_vals);

			});
		}
		
		
		
		
		function load_chart(categories,data1,data2,data3,data4,data5,data6){
			$('#container').highcharts({
				title: {
					text: 'Payments Received'
				},
				subtitle: {
					text: title
				},
				xAxis: {
					categories: categories
				},
				yAxis: {
					title: {
						text: 'Amount'
					},
					plotLines: [{
						value: 0,
						width: 1,
						color: '#808080'
					}]
				},
				credits: {
					enabled: false
				},
				legend: {
					layout: 'horizontal',
					align: 'center',
					verticalAlign: 'bottom',
					borderWidth: 1,
					labelFormatter: function() {
						var total = 0;
					  for(var i=this.yData.length; i--;) { total += this.yData[i]; };
					  return this.name + ' (' + total+')';
					}
				},
				series: [{
					name: 'International Banking',
					data: data1
				},{
					name: 'Bacs',
					data: data2
				},{
					name: 'Debit or Credit Card',
					data: data3
				},{
					name: 'Cash',
					data: data4
				},{
					name: 'Cheque',
					data: data5
				},{
					name: 'PayPal',
					data: data6
				}]
			});
			
		}
		
		function load_day_chart(categories,data1,data2,data3){
			$('#container').highcharts({
				chart: {
					type: 'column'
				},
				title: {
					text: 'Payments Received'
				},
				subtitle: {
					text: title
				},
				colors: ["#2f7ed8", "#30a0eb", "#a7b5c5"],
				xAxis: {
					categories: categories,
					
				},
				yAxis: {
					min: 0,
					title: {
						text: 'Amount'
					},
					stackLabels: {
						enabled: true,
						style: {
							fontWeight: 'bold'
							//color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
						}
					}
				},

				credits: {
					enabled: false
				},
				plotOptions: {
					column: {
						stacking: 'normal',
						dataLabels: {
							enabled: true
							//color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
						}
					}
				},
				series: [{
					name: 'Payments',
					data: data1
				}]
			});
		
		}
		
		
		
		$(document).ready(function() {
		$( "#Client_ID" ).combobox();
		draw_week_chart();
		$( "#Client_ID" ).change(function(){
			client_id=$(this).val();
		});
		
		$('#btn_redraw').click(function(){
			get_data(date_to_str(start_date),date_to_str(end_date));
		});
});
		
    </script>
	
<script>
	 var xhr;
  (function( $ ) {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
	  var ele_select= this.element;
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            tooltipClass: "ui-state-highlight"
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
		  	//alert("show all");
            ui.item.option.selected = true;
			
            this._trigger( "select", event, {
              item: ui.item.option
            });
			ele_select.trigger('change');
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .attr( "title", "Show All Items" )
          .tooltip()
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right" )
          .mousedown(function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .click(function() {
            input.focus();
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass last search string as value to search for, displaying last results
            input.autocomplete( "search", 'SHOWALL' );
          });
      },
 
      _source: function( request, response ) {
        //var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
		var ele_select= this.element;
		if(request.term=='SHOWALL'){
			response(ele_select.children( "option" ).map(function() {
          var text = $( this ).text();
		 var value= $( this ).val();
          //if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
		
		}
		else
		{
		var jsonRow = 'getcompaniesonsearch.cgi?srch='+request.term;
		
		

		//alert(jsonRowURLStr);
		if(xhr) xhr.abort();
		xhr=$.getJSON(jsonRow,function(result){
			
			if(result){
				var html='<option value=""></option>';

				$.each(result, function(i,item)
				{
					html += '<option value="'+item.id+'">'+item.value+'</option>';
				});
				ele_select.html(html);
				
				
				response(ele_select.children( "option" ).map(function() {
          var text = $( this ).text();
		 var value= $( this ).val();
          //if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
				
				
			}
		});
       
	  } 
		
      },
 
      _removeIfInvalid: function( event, ui ) {
 
        // Selected an item, nothing to do
        if ( ui.item ) {

          return;
        }
 
        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
		  var ele_select= this.element;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;	
			ele_select.trigger('change');
            return false;
          }
        });
 
        // Found a match, nothing to do
        if ( valid ) {
          return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.data( "ui-autocomplete" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
  })( jQuery );
 


  </script>	
	
</body>
</html>