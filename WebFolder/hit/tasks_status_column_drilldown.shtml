<!--HIT_EXECUTE

C_TEXT(_HTMLTITLETXT)
if(_HIT_AuthenticateSession="Session-Authenticated-OK")
//_HIT_HTMLTXT:="<h1>AUTH</h1>"
_HTMLTITLETXT:="Tasks Chart"
else
_HIT_HTTPD_RedirectToURL ("sign-in.shtml")
end if 
-->
<!DOCTYPE html>
<html>
	<head>
	
    <!--#4DSCRIPT/_HIT_LoadInclude/hit/includes/header.shtml-->
	<!-- <link rel="stylesheet" href="css/base/jquery-ui.css" /> -->

    <!-- this page specific styles -->
    <link rel="stylesheet" href="css/compiled/index.css" type="text/css" media="screen" />   
	
<link rel="stylesheet" href="css/autocomplete.css" />
		<!--[if lt IE 9]>
		  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		<![endif]-->
	</head>
	<body style="background-color:#FFFFFF">

	<!--#4DIF (_HIT_WebApp_GetField ("view")="small")-->

					   <div id="container" style="margin: 0 auto; height:280px"></div>
			
			<!--#4DELSE-->


		<div style="background:#fff;">

				<div id="pad-wrapper" style="margin-top:0px; margin-bottom:0px;">
					<div class="row-fluid form-wrapper">
							<form  action="" class="form-comment" method="post" >
								<div class="ui-widget" style="display:inline;padding-right:20px;">
									Project &nbsp;
									<select name="Project_ID" id="Project_ID">
										<option value=""></option>
										<!--#4DSCRIPT/Web_LoadProjects/-->
										<!--4DLOOP [Projects]-->
										<option value="<!--#4DVAR [Projects]proj_id-->" ><!--4DVAR [Projects]proj_name--></option>
										<!--4DENDLOOP--> 
									</select>
								</div>
								<input type="button" class="btn-glow primary" value="Submit" id="btn_redraw">		
							</form>
					</div>
					<!-- statistics chart built with jQuery Flot -->
					<div class="row-fluid chart">
						<div class="btn-group pull-right">
							<button class="glow left" onClick="set_defaults(); draw_year_chart()" id="yearly">Year</button>
							<button class="glow middle" onClick="set_defaults(); draw_month_chart()" id="monthly">Month</button>
							<button class="glow middle" onClick="set_defaults(); draw_week_chart()" id="weekly">Week</button>
							<button class="glow right" onClick="set_defaults(); draw_day_chart();" id="daily">Day</button>
						</div>
						<div class="btn-group pull-left" id="weeks">
							<button class="glow left" onClick="draw_prev_chart()" id="prev">Previous</button>
							<button class="glow right active" onClick="draw_next_chart()" id="next" disabled="disabled">Next</button><br/>
						</div>
						
						<div class="span12">
						   <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
						</div>			
					</div>
					<!-- end statistics chart -->
				</div>
				<!--#4DENDIF-->
            </div>
       

		<!-- scripts -->
		<!--#4DSCRIPT/_HIT_LoadInclude/hit/includes/footer.shtml--> 
		<!--<script src="js/jquery-latest.js"></script>
		<script src="js/bootstrap.min.js"></script>
		
		<script src="js/ui/jquery-ui.js"></script> -->
		<script src="js/jquery.uniform.min.js"></script>
		<!-- charts -->
		<script src="https://code.highcharts.com/highcharts.js"></script>
		<script src="https://code.highcharts.com/modules/data.js"></script>
		<script src="https://code.highcharts.com/modules/drilldown.js"></script>
		<script src="js/no-data-to-display.src.js"></script>
		<script src="js/charts.js"></script>
		<script type="text/javascript">
			var brandsData=new Array(), drilldownSeries=new Array();
			var project_id='';
			draw_week_chart();
			
			function get_day_data(s_date, e_date){
				get_data(s_date, e_date);
			}
			
			function get_data(s_date, e_date) {
				var s_date_arr=s_date.split('/');
				var sdate=s_date_arr[1]+'/'+s_date_arr[0]+'/'+s_date_arr[2];
				var e_date_arr=e_date.split('/');
				var edate=e_date_arr[1]+'/'+e_date_arr[0]+'/'+e_date_arr[2];
				var dataString = 's_date='+sdate+'&e_date='+edate+'&project_id='+project_id+'&mode='+mode;
				jsonRow = 'returnTasksStatus.cgi?'+dataString;
				$.getJSON(jsonRow,function(result){
					//brandsData=result;
					brandsData=new Array();
					drilldownSeries=new Array();
					var total_task=0;
					$.each(result,function(i,item){
						var temp_data1={name:item.name, y:item.y, drilldown:item.name};
						var temp_data3=new Array();
						$.each(item.drilldown,function(k,drilldata){
							var temp_data4=new Array();
							temp_data4.push(drilldata.EmpName);
							temp_data4.push(drilldata.num);
							temp_data3.push(temp_data4);							
						});
						var temp_data2={name:item.name, id:item.name, data:temp_data3};
						drilldownSeries.push(temp_data2);
						brandsData.push(temp_data1);
						total_task+=item.y;
					})
					//console.log(brandsData);
					//console.log(drilldownSeries);
					if(total_task==0){
						brandsData=new Array();
						drilldownSeries=new Array();	
					}
					load_chart(brandsData);
				});
			}
			function load_chart(status_arr) {
					$('#container').highcharts({
						chart: {
							type: 'column'
						},
						title: {
							text: 'Tasks'
						},
						subtitle: {
							text: title
						},
						xAxis: {
							<!--#4DIF (_HIT_WebApp_GetField ("view")="small")-->
							labels: {
								rotation: -60
							},
							<!--#4DENDIF-->
							type: 'category'
						},
						yAxis: {
							title: {
								text: 'Number of tasks'
							}
						},
						legend: {
							enabled: false
						},
						credits: {
							enabled: false
						},
						plotOptions: {
							series: {
								borderWidth: 0,
								dataLabels: {
									enabled: true,
									format: '{point.y}'
								}
							}
						},

						tooltip: {
							headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
							pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y}</b> tasks<br/>'
						}, 

						series: [{
							name: 'Task Status',
							colorByPoint: true,
							data: brandsData
						}],
						drilldown: {
							series: drilldownSeries
						}
						
					});
				}
				$(function () {
					$( "#Project_ID" ).combobox();
					$('#btn_redraw').click(function(){
						get_data(date_to_str(start_date),date_to_str(end_date));
					});
					$("#Project_ID").change(function(){
						project_id=$(this).val();
					});
				});
		</script>
		<script>
	 var xhr;
  (function( $ ) {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
	  var ele_select= this.element;
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            tooltipClass: "ui-state-highlight"
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
		  	//alert("show all");
            ui.item.option.selected = true;
			
            this._trigger( "select", event, {
              item: ui.item.option
            });
			ele_select.trigger('change');
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .attr( "title", "Show All Items" )
          .tooltip()
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right" )
          .mousedown(function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .click(function() {
            input.focus();
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass last search string as value to search for, displaying last results
            input.autocomplete( "search", 'SHOWALL' );
          });
      },
 
      _source: function( request, response ) {
        //var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
		var ele_select= this.element;
		if(request.term=='SHOWALL'){
			response(ele_select.children( "option" ).map(function() {
          var text = $( this ).text();
		 var value= $( this ).val();
          //if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
		
		}
		else
		{
			var jsonRow = 'getprojectsonsearch.cgi?srch='+request.term;

		//alert(jsonRowURLStr);
		if(xhr) xhr.abort();
		xhr=$.getJSON(jsonRow,function(result){
			
			if(result){
				var html='<option value=""></option>';

				$.each(result, function(i,item)
				{
					html += '<option value="'+item.id+'">'+item.value+'</option>';
				});
				ele_select.html(html);
				
				
				response(ele_select.children( "option" ).map(function() {
          var text = $( this ).text();
		 var value= $( this ).val();
          //if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
				
				
			}
		});
       
	  } 
		
      },
 
      _removeIfInvalid: function( event, ui ) {
 
        // Selected an item, nothing to do
        if ( ui.item ) {

          return;
        }
 
        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
		  var ele_select= this.element;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;	
			ele_select.trigger('change');
            return false;
          }
        });
 
        // Found a match, nothing to do
        if ( valid ) {
          return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.data( "ui-autocomplete" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
  })( jQuery );
 


  </script>
	</body>
</html>