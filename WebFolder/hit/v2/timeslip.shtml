<!--HIT_EXECUTE

C_LONGINT(_HIT_COUNTER)
C_BOOLEAN(mUserIsCurrentBool)
C_TEXT(_HIT_HTMLTXT;pUserUUIDStr;pUserTask)

if(_HIT_AuthenticateSession="Session-Authenticated-OK")

QUERY([Timeslips];[Timeslips]uuid=_HIT_WebApp_GetField ("uuid"))
mUserIsCurrentBool:=(_HIT_WebSession_GetVar ("auth_user_type")="CLIENTS")

IF (Records in selection([Timeslips])=0)
If(_HIT_WebApp_GetField ("task_id")#"")
pUserTask:=_HIT_WebApp_GetField ("task_id")
Else
pUserUUIDStr:=_HIT_WebSession_GetVar ("auth_user_uuid")
pUserTask:=User_GetPreferences (pUserUUIDStr;"task_id")
End If
QUERY([Tasks];[Tasks]task_id=num(pUserTask))

ELSE

QUERY([Tasks];[Tasks]task_id=[Timeslips]task_id)

END IF

else
_HIT_HTTPD_RedirectToURL ("sign-in.shtml")
end if 
-->
<!DOCTYPE html>
<html lang="en">
<!-- BEGIN HEAD -->
<head>
	<title><!--#4DIF (Records in selection([Timeslips])=1)-->Update Timeslip<!--#4DELSE-->New Timeslip<!--#4DENDIF--></title>
	<!--#4DSCRIPT/_HIT_LoadInclude/hit/v2/includes/InitCss.shtml-->
	<link href="assets/css/autocomplete.css" rel="stylesheet">
 	<link href="assets/plugins/datepicker/css/bootstrap.datepicker.css" rel="stylesheet" />
 	<link href="assets/plugins/timepicker/jquery.ptTimeSelect.css" rel="stylesheet" />
 	
	<style>
		#message{
			color:#FF0000;
		}

		.jqibox {
			z-index:9999!important;
		}
		.ui-widget-header {
			background:#eeeeee;
			margin-bottom:3px;
		}
		.ui-widget-header .ui-state-default {
			background:#eeeeee;
			margin-bottom:0px;
		}
		.ui-widget-header .ui-state-hover {
			background:#eeeeee;
			margin-bottom:0px;
		}
	</style>
</head>
<!-- END HEAD -->
<!-- BEGIN BODY -->
<body class="fixed-leftside fixed-header">
	<!-- BEGIN HEADER -->
		<!--#4DSCRIPT/_HIT_LoadInclude/hit/v2/includes/header.shtml-->
	<!-- END HEADER -->

<div class="wrapper"> 
 		<!-- BEGIN LEFTSIDE -->
        <!--#4DSCRIPT/_HIT_LoadInclude/hit/v2/includes/left-navigation.shtml-->
		<!-- END LEFTSIDE -->
  
  <!-- BEGIN RIGHTSIDE -->
  <div class="rightside bg-grey-100"> 
    <!-- BEGIN PAGE HEADING -->
    <div class="page-head">
    	<div class="row">
        <div class="col-sm-6">
     	 <h1 class="page-title"><!--#4DIF (Records in selection([Timeslips])=1)-->Update Timeslip<!--#4DELSE-->New Timeslip<!--#4DENDIF--></h1>
         </div>
      <!-- BEGIN BREADCRUMB -->
      <div class="col-sm-6">
          <ol class="breadcrumb sm-pullright">
            <li><a href="javascript:void(0)" onclick="funURLHandler('index.shtml','open-index-window')"><i class="ion-home margin-right-5"></i> Dashboard</a></li>
            <li><a href="javascript:void(0)" onclick="funURLHandler('timeslips.shtml','open-timeslip-window')">Timeslip</a></li>
            <li><!--#4DIF (Records in selection([Timeslips])=1)-->Update timeslip<!--#4DELSE-->Add new timeslip<!--#4DENDIF--></li>
          </ol>
       </div>   
      <!-- END BREADCRUMB -->
      </div> 
    </div>
    <!-- END PAGE HEADING -->
    
    <div class="container-fluid">
      
<div class="row">
  <div class="col-md-12">
    <div class="panel" style="padding-top:20px;"> 
      <div class="panel-body no-padding-top bg-white"> 
     <div data-example-id="togglable-tabs">
    <ul id="new-customer-tab" class="nav nav-tabs" role="tablist">
    
    </ul>
    <div id="myTabContent" class="tab-content" style="padding-top:25px; border-left: 1px solid #ddd; border-right: 1px solid #ddd;  border-bottom: 1px solid #ddd; padding-bottom:25px; padding-left:15px; padding-right:15px;">
      <div role="tabpanel" class="tab-pane fade in active" id="customerinfo" aria-labelledby="home-tab">
      	<form class="form-horizontal fixed-width-form" name="TimeslipForm" id="TimeslipForm" method="post" action="savetimeslip.cgi">
       		<div class="row">
           	<div class=" col-sm-12">
             	<input name="form_name" class="span9" type="hidden" value="ContactForm" id="form_name">
				<input name="Timeslip_uuid" class="span9" type="hidden" value="<!--HIT_EXECUTE _HIT_HTMLTXT:=_HIT_WebApp_GetField ("uuid")-->" id="Timeslip_uuid">        
				<div class="form-group">
   				<label for="" class="col-sm-3 control-label">Task Name<sup class="req">*</sup></label>
                    <div class="col-sm-8 ui-widget">
                        <select  class="form-control width300" id="Task_ID" name="Task_ID">
							<!--#4DIF (Records in selection([Timeslips])=0)-->
							<!--#4DIF (pUserTask="")-->
								<option value=""></option>
								<!--#4DSCRIPT/Web_LoadTasks/-->
								<!--4DLOOP  [Tasks]-->
									<option value="<!--4DVAR [Tasks]task_id-->"><!--4DVAR [Tasks]task_name--></option>
								<!--4DENDLOOP-->
								<!--#4DELSE-->
									<option value="<!--4DVAR [Tasks]task_id-->" selected><!--4DVAR [Tasks]task_name--></option>									 
								<!--#4DENDIF-->
							<!--#4DELSE-->
								<option value="<!--4DVAR [Tasks]task_id-->" selected><!--4DVAR [Tasks]task_name--></option>									 
							<!--#4DENDIF-->
                        </select>
                    </div>
     			</div>

  				<div class="form-group">
    				<label for="" class="col-sm-3 control-label">Employee Name<sup class="req">*</sup></label>
    				<div class="col-sm-8">
      					<select name="Employee_ID" id="Employee_ID" class="form-control width300">
						<option value="">--Select Employee--</option>
						<!--#4DSCRIPT/Web_LoadEmployees/-->
						<!--4DLOOP  [Employees]-->
							<option value="<!--4DVAR [Employees]emp_id-->" <!--#4DIF ([Timeslips]emp_id=[Employees]emp_id)-->selected<!--4DELSE--><!--4DENDIF-->><!--4DVAR [Employees]emp_first_name--> <!--4DVAR [Employees]emp_last_name--></option>
						<!--4DENDLOOP-->	
						</select>
      				</div>
    			</div>
    			<div class="form-group">
    				<label for="" class="col-sm-3 control-label">Slip Start Date<sup class="req">*</sup></label>
    				<div class="col-sm-8">
      					<input type="text" class="form-control datepicker width300" data-date-format="dd/mm/yyyy" <!--#4DIF (timestamp_unix_toDate([Timeslips]Timestamp_start)=!01/01/1970!)-->value="<!--#4DHTMLVAR Current date -->"<!--4DELSE-->value="<!--#4DHTMLVAR timestamp_unix_toDate([Timeslips]Timestamp_start)-->"<!--4DENDIF--> name="Slip_Date" id="Slip_Date" readonly >
                    </div>
  				</div>
  				 				
  				<div class="form-group">
    			<label for="" class="col-sm-3 control-label">Slip Timer Started</label>
    				<div class="col-sm-8">
    					<div class="input-group">
							<input readonly type="text" class="form-control timePicker width135 margin-right-15 xs-margin-btm10" value="<!--#4DVAR timestamp_unix_toTime ([Timeslips]Timestamp_start)-->" name="Slip_TimerStarted" id="setStartTime">
							<button type="button" class="btn btn-primary width150" id="StartTimeButton">Set current time</button>
						
						</div>
      				</div>
  				</div>
  				<div class="form-group">
    				<label for="" class="col-sm-3 control-label">Slip End Date<sup class="req">*</sup></label>
    				<div class="col-sm-8">
      					<input type="text" class="form-control datepicker width300" data-date-format="dd/mm/yyyy" <!--#4DIF (timestamp_unix_toDate([Timeslips]Timestamp_end)=!01/01/1970!)-->value="<!--#4DHTMLVAR Current date -->"<!--4DELSE-->value="<!--#4DHTMLVAR timestamp_unix_toDate([Timeslips]Timestamp_end)-->"<!--4DENDIF--> name="Slip_EndDate" id="Slip_EndDate" readonly>
                    </div>
  				</div>
  				 				
  				<div class="form-group">
    			<label for="" class="col-sm-3 control-label">Slip Timer End</label>
    				<div class="col-sm-8">
    					<div class="input-group">
							<input readonly type="text" placeholder="" class="form-control timePicker width135 margin-right-15 xs-margin-btm10" value="<!--#4DVAR timestamp_unix_toTime ([Timeslips]Timestamp_end)-->" name="Slip_Timer_End" id="setEndTIme">
							<button type="button" class="btn btn-primary width150" id="EndTimeButton">Set current time</button>
						</div>
      				</div>
  				</div>
  				
  				<div class="form-group">
   		        	<label for="" class="col-sm-3 control-label">Break time</label>
                    <div class="col-sm-3">
    			 		<div class="checkbox">
      		  				<label> <input type="checkbox" name="lunchinterval" class="lunchinterval" id="lunchinterval" value="true" <!--#4DIF (mUserIsCurrentBool)-->disabled <!--#4DELSE--><!--#4DIF ([Timeslips]exclude_lunch)-->checked disabled<!--4DELSE--><!--4DENDIF--><!--#4DENDIF-->> Exclude break time </label>
    			  		</div>
    			  		<span style="display:none;" class="intervalTimeSpan"></span>
                        <input name="intervalTime" id="intervalTime" type="hidden" value="<!--#4DVAR [Timeslips]interval_time-->" readonly>
                        <input type="hidden" id="exclude_lunch" name="exclude_lunch" value="off" readonly>
  					</div>
  				</div>
  				<div class="form-group breakTimeClass" style="display:none;">
    				<label for="" class="col-sm-3 control-label">Start Time</label>
    				<div class="col-sm-1 width150">
      					<input type="text" class="form-control brkTimePicker width100 xs-margin-btm10" name="setBreakStartTime" id="setBreakStartTime" readonly>
    				</div>
    				<label for="" class="col-sm-3 label-width100 control-label">End Time</label>
    				<div class="col-sm-2 width100">
      					<input type="text" class="form-control width100 brkTimePicker" name="setBreakEndTime" id="setBreakEndTime" readonly>
    				</div>
  				</div>
  				<div class="form-group margin-lft215" id="Errmessage" style="color: #a94442">
    			
  				</div>
  				<div class="form-group">
    			<label for="" class="col-sm-3 control-label">Slip Hours</label>
    				<div class="col-sm-8  ">
      					<input type="text" class="form-control width300" id="Slip_Hours" placeholder="" value="<!--#4DVAR [Timeslips]slip_hours-->" name="Slip_Hours">
    				</div>
  				</div>
  				
  				
  				<div class="form-group" <!--#4DIF ([Timeslips]interval_time=0)-->style="display:none;"<!--#4DENDIF-->>
    			<label for="" class="col-sm-3 control-label">Lunch Break</label>
    				<div class="col-sm-8  ">
      					<input type="text" class="form-control width300" name="interval_time" id="interval_time" value="<!--#4DVAR [Timeslips]interval_time*60--> minutes" readonly>
    				</div>
  				</div>
  				
  				<div class="form-group">
    				<label for="" class="col-sm-3 control-label">Description</label>
    				<div class="col-sm-3">
    					<textarea <!--#4DIF (mUserIsCurrentBool)-->readonly<!--#4DELSE--><!--#4DENDIF--> class="form-control width300" name="Slip_Description" id="Slip_Description"><!--#4DVAR [Timeslips]slip_description--></textarea>
    				</div>
  				</div>
  				
  				<div class="form-group">
    				<label for="" class="col-sm-3 control-label">Slip Rate</label>
    				<div class="col-sm-3">
      					<input <!--#4DIF (mUserIsCurrentBool)-->readonly<!--#4DELSE--><!--#4DENDIF--> type="text" class="form-control width300" name="Slip_Rate" id="Slip_Rate" value="<!--#4DVAR [Timeslips]slip_rate-->">
    				</div>
  				</div>
  				<div class="form-group">
    				<label for="" class="col-sm-3 control-label">Billing Status<sup class="req">*</sup></label>
    				<div class="col-sm-2">
      					<select <!--#4DIF (mUserIsCurrentBool)-->readonly readonly="readonly" <!--#4DELSE--><!--#4DENDIF-->name="Billing_Status" id="Billing_Status" class="form-control width300">
							<option value="0" <!--#4DIF ([Timeslips]billing_status=0)-->selected<!--4DELSE--><!--4DENDIF-->>Non Chargeable</option>
							<option value="1"  <!--#4DIF ([Timeslips]billing_status=1)-->selected<!--4DELSE--><!--4DENDIF-->>Chargeable</option>
							<option value="2"  <!--#4DIF ([Timeslips]billing_status=2)-->selected<!--4DELSE--><!--4DENDIF-->>Billed</option>
						</select>
      				</div>
    			</div>
      		</div>
 	 		</div>
     		<div class="row">
             	<div class="col-sm-12 text-centers margin-lft215">
                	<input type="submit" class="btn palette-carrot btn-color margin-right-5 btn-sm" id="timeslipSubmit" name="timeslipSubmit">
               		<!--#4DIF (Records in selection([Timeslips])=0)-->
                 	<input type="reset" class="btn btn-primary btn-sm">
                 	<!--4DENDIF-->
                </div>
     		</div>
       </form>
      </div>
    </div>    
  </div>
</div>
</div>
</div>
  <!-- /.col --> 
</div>
<!-- /.row --> 

		<!-- BEGIN FOOTER -->
      	<!--#4DSCRIPT/_HIT_LoadInclude/hit/v2/includes/footer.shtml-->
      	<!-- END FOOTER --> 
</div>
<!-- /.container-fluid -->
</div>
<!-- /.rightside -->
</div>
<!-- /.wrapper --> 
<!-- END CONTENT --> 

<!-- BEGIN JAVASCRIPTS --> 


<!--#4DSCRIPT/_HIT_LoadInclude/hit/v2/includes/InitJs.shtml-->
<!-- BEGIN JAVASCRIPTS --> 
<!-- bootstrap validator -->
<script src="assets/plugins/bootstrapValidator/bootstrapValidator.min.js" type="text/javascript"></script>
	
<!-- maniac -->
<script type="text/javascript" src="assets/js/maniac.js"></script>
<script type="text/javascript" src="assets/js/autocomplete.js"></script>

<!-- datepicker --> 
<script src="assets/plugins/datepicker/js/bootstrap.datepicker.js" type="text/javascript"></script>

<!-- timepicker --> 
<script src="assets/plugins/timepicker/jquery.ptTimeSelect.js" type="text/javascript"></script>

<script type="text/javascript">
	maniac.loadvalidator();
	function setCurrentTime(selector){
		var d = new Date();
		var curr_hour = d.getHours(); 
		var curr_min = d.getMinutes();
		var ampm='AM';
		if(curr_hour>=12){
			ampm='PM';
		}
		if(curr_hour>12){
			curr_hour= curr_hour-12;
		}
		if(curr_min<10){
			curr_min= '0'+String(curr_min);
		}
		var curr_time= curr_hour+':'+curr_min+' '+ampm;			
	  	$('#'+selector).val(curr_time);
		$('#'+selector).trigger('change');
	}
	function __getTime(timeStr,selector){
		var s_date=$('#'+selector).val();
		var s_date_arr=s_date.split("/");
		if(timeStr!=""){
			var time_arr= timeStr.split(":");
			var s_hour= Number(time_arr[0]);
			var s_min= Number(time_arr[1].substr(0,2));
			var s_ampm= time_arr[1].substr(time_arr[1].length - 2);
			if(s_hour==12){
				s_hour= 0;
			}
			if(s_ampm == 'PM'){
				s_hour= s_hour+12;
			}
							
			var datetimeStr= new Date(s_date_arr[2],s_date_arr[1]-1,s_date_arr[0],s_hour,s_min,'0');
			var actualtime= datetimeStr.getTime();
		}else{
			var actualtime= 0;
		}
		
		//console.log(actualtime);
		return actualtime;				
	}
	function resetIntervalTime(){
		$('#intervalTime').val('');
		$('#exclude_lunch').val("off");
		$('.brkTimePicker').val('');
		$('.breakTimeClass').hide();
		$("input.lunchinterval").attr("checked", false);
		$('.intervalTimeSpan').html('');
		$('.intervalTimeSpan').hide();
		var mainStartTime = $('#setStartTime').val();
		var mainEndTime = $('#setEndTIme').val();
		
		var mainStartTimeStr = __getTime(mainStartTime,"Slip_Date");
		var mainEndTimeStr = __getTime(mainEndTime,"Slip_Date");
		if(mainEndTimeStr>=mainStartTimeStr){
			var timeslipsDiff= mainEndTimeStr-mainStartTimeStr;
			var timeslipsMinutes = Math.floor(timeslipsDiff / (1000*60));
			var slipHourStr= (timeslipsMinutes/60).toFixed(2);
			$('#Slip_Hours').val(slipHourStr);	
		}else{
			$('#Slip_Hours').val('');	
		}
	} 
	function chng_time_format(){
		var s_time=$('#setStartTime').val();
		var e_time=$('#setEndTIme').val();
		var s_time_arr=s_time.split(":");
		var e_time_arr=e_time.split(":");
		var s_hour= Number(s_time_arr[0]);
		var e_hour= Number(e_time_arr[0]);
		var s_min= Number(s_time_arr[1]);
		var e_min= Number(e_time_arr[1]);
		var s_ampm='AM';
		var e_ampm='AM';
		if(s_hour>=12){
			s_ampm='PM';
		}
		if(e_hour>=12){
			e_ampm='PM';
		}
		if(s_hour>12){
			s_hour= s_hour-12;
		}
		if(e_hour>12){
			e_hour= e_hour-12;
		}
		if(s_min<10){
			s_min= '0'+String(s_min);
		}
		if(e_min<10){
			e_min= '0'+String(e_min);
		}
		s_time=s_hour+':'+s_min+' '+s_ampm;
		e_time=e_hour+':'+e_min+' '+e_ampm;	
		$('#setStartTime').val(s_time);
		$('#setEndTIme').val(e_time);	
	}
	
	function evaluateSlipHoursWithBreakTime(){
		var s_time=$('#setBreakStartTime').val();
		var e_time=$('#setBreakEndTime').val();
						
		var mainStartTime = $('#setStartTime').val();
		var mainEndTime = $('#setEndTIme').val();
		
		var mainStartTimeStr = __getTime(mainStartTime,"Slip_Date");
		var mainEndTimeStr = __getTime(mainEndTime,"Slip_Date");
		
		if(s_time!='' && e_time!='') {
			var start_time= __getTime(s_time,"Slip_Date");
			var end_time=  __getTime(e_time,"Slip_Date");
			var validStartTimeSelectionFlag=false;
			var validEndTimeSelectionFlag=false;
											
			if(start_time>=mainStartTimeStr && mainEndTimeStr>=start_time){
				validStartTimeSelectionFlag=true;
			}
			if(mainEndTimeStr>=end_time && start_time>=mainStartTimeStr){
				validEndTimeSelectionFlag=true;
			}
				
			if(validStartTimeSelectionFlag == true){
				if(validEndTimeSelectionFlag == true){
					if(end_time>=start_time){
						var diff_time= end_time-start_time;
									
						var minutes = Math.floor(diff_time / (1000*60));
						var intervalTimeHrs = (minutes/60).toFixed(2);
						if(intervalTimeHrs>=1){
							var intervalTimeStr = "("+intervalTimeHrs+" hr)";
						}else{
							var intervalTimeStr =  "("+intervalTimeHrs+" hrs)";
						}
						var time_diff= minutes*60;
						$('#Errmessage').html('');
										
						var timeslipsDiff= mainEndTimeStr-mainStartTimeStr;
						var timeslipsMinutes = Math.floor(timeslipsDiff / (1000*60));
						var slipHourStr= (timeslipsMinutes/60).toFixed(2);
							
						var totalSlipSeconds = slipHourStr*3600;
						var evalSeconds= totalSlipSeconds-time_diff;
						var evalHours = (evalSeconds/3600).toFixed(2);
						$('.intervalTimeSpan').html(intervalTimeStr);
						$('.intervalTimeSpan').show();
						$('#Slip_Hours').val(evalHours);	
						$('#intervalTime').val(intervalTimeHrs);
						$('#exclude_lunch').val("on");
						$('#timeslipSubmit').removeAttr('disabled');
					}else if(end_time<start_time){
						$('#Errmessage').html("End date time must be greater than start date time");
						$('#setBreakEndTime').val('');
					}
				}else{
					$('#Errmessage').html('');
					$('#setBreakEndTime').val('');
					$('#Errmessage').html("Break time should lie between timeslip timing!");
				}
			}else{
				$('#Errmessage').html('');
				$('#setBreakStartTime').val('');
				$('#Errmessage').html("Break time should lie between timeslip timing!");
			}
		}else{
			$('#Errmessage').html('');
			$('#Errmessage').html("Please specify both Start and End Interval time!");
		}
	}
	
	$(document).ready(function () {
		chng_time_format();
		// datepicker plugin
		$('#Slip_Date').datepicker({"autoclose": true}).on('changeDate', function (ev) {
			var arrStartDate= $('#Slip_Date').val().split('/');
			var dateText = new Date(arrStartDate[1]+'/'+arrStartDate[0]+'/'+arrStartDate[2]);
			
			$('#Slip_EndDate').datepicker('setStartDate', dateText);
		});
		
		$('#Slip_EndDate').datepicker({"autoclose": true}).on('changeDate', function (ev) {
			alert( $('#Slip_EndDate').val());
			var arrEndDate= $('#Slip_EndDate').val().split('/');
			var dateText = new Date(arrEndDate[1]+'/'+arrEndDate[0]+'/'+arrEndDate[2]);
			
			$('#Slip_Date').datepicker('setEndDate', dateText);
			//$('#TimeslipForm').bootstrapValidator('revalidateField', 'Slip_EndDate');
		});
		var arrStartDate= $('#Slip_Date').val().split('/');
		var dateText = new Date(arrStartDate[1]+'/'+arrStartDate[0]+'/'+arrStartDate[2]);
			
		$('#Slip_EndDate').datepicker('setStartDate', dateText);
		var arrEndDate= $('#Slip_EndDate').val().split('/');
		var dateText = new Date(arrEndDate[1]+'/'+arrEndDate[0]+'/'+arrEndDate[2]);
			
		$('#Slip_Date').datepicker('setEndDate', dateText);
		
		//timepicker
		<!--#4DIF (Records in selection([Timeslips])=0)-->
		$("#setStartTime").val('');
		$("#setEndTIme").val('');
		<!--#4DELSE--><!--#4DENDIF-->
		$('#setStartTime').ptTimeSelect({
		 	onClose: function(input, widget){
				$('#setStartTime').trigger('change');
			}
		});
		$('#setEndTIme').ptTimeSelect({
		 	onClose: function(input, widget){
				$('#setEndTIme').trigger('change');
			}
		});
		$('#StartTimeButton').on('click', function (){
			setCurrentTime('setStartTime');		
		}); 
		
		$('#EndTimeButton').on('click', function (){
		 	setCurrentTime('setEndTIme');		
		});
		$('#setBreakStartTime').ptTimeSelect({
		 	onClose: function(input, widget){
		 		$('#setBreakStartTime').trigger('change');
			}
		});
		$('#setBreakEndTime').ptTimeSelect({
			onClose: function(input, widget){
				$('#setBreakEndTime').trigger('change');
			}
		});
		 
		$('#setStartTime').change(function(){
			if($('#setEndTIme').val()==''){
				$('#setEndTIme').val($(this).val());
			}else if($(this).val()==''){
				$('#setEndTIme').val('');
			}
		});
		
		$('#setEndTIme').change(function(){
			if($(this).val()==''){
				$(this).val($('#setEndTIme').val());
			}else if($('#setStartTime').val()==''){
				$('#setStartTime').val($(this).val());
			}
		});
		
		$(".timePicker").change(function() {
			var s_date=$('#Slip_Date').val();
			var e_date=$('#Slip_EndDate').val();
			var s_time=$('#setStartTime').val();
			var e_time=$('#setEndTIme').val();
			if(e_date==''){
				e_date=s_date;
			}
			if(s_time=='' || e_time==''){
				s_time="12:00 AM";
				e_time="12:00 AM";
			}
			if(s_date!='' && e_date!='' && s_time!='' && e_time!='') {
				var start_time = __getTime(s_time,"Slip_Date");
				var end_time = __getTime(e_time,"Slip_EndDate");
				//console.log(start_time+', '+end_time);
				if(end_time>=start_time){
					var diff_time= end_time-start_time;
					
					var minutes = Math.floor(diff_time / (1000*60));

					var time_diff= (minutes/60).toFixed(2);
									
					$('#err_msg').html('');
					
					var breakStartTime=$('#setBreakStartTime').val();
					var breakEndTime=$('#setBreakEndTime').val();
					if(breakStartTime!="" && breakEndTime!=""){			
						var brkStartTimeStr = __getTime(breakStartTime,"Slip_Date");
						var brkEndTimeStr = __getTime(breakEndTime,"Slip_Date");
																
						if(brkStartTimeStr>=start_time && end_time>=brkStartTimeStr && end_time>=brkEndTimeStr && brkEndTimeStr>=start_time && brkEndTimeStr>brkStartTimeStr){
							evaluateSlipHoursWithBreakTime();
						}else{
							resetIntervalTime();
							$('#Slip_Hours').val(time_diff);
						}
					}else{
						var interval_time=$('#interval_time').val();
						if(interval_time!=""){
							interval_time=<!--#4DVAR [Timeslips]interval_time-->
							var total_hours= time_diff*60;
							var intervalTimeStr= interval_time*60;
							if(total_hours>intervalTimeStr){
								var timeDiffStr=total_hours-intervalTimeStr;
								time_diff= (timeDiffStr/60).toFixed(2);
								$('#Slip_Hours').val(time_diff);
							}else{
								$('#Slip_Hours').val(time_diff);
							}
						}else{
							$('#Slip_Hours').val(time_diff);
						}
					}						
										
				}
				else if(end_time<start_time){
					__alertMessage("End date time must be greater than start date time");
					$('#Slip_EndDate').val('');
					$('#setEndTIme').val('');
					$('#Slip_Hours').val('');
					resetIntervalTime();
				}
			}
		});
		
		$("input.lunchinterval").on("click", function() {
			if($(this).is(":checked")){
				if($('#setStartTime').val()!="" && $('#setEndTime').val()!="" && $('#Slip_Date').val()!="" && $('#Slip_EndDate').val()!=""){
   					$('.breakTimeClass').show();
   				}else{
   					__alertMessage('Please select start/end date and time');
					$("input.lunchinterval").attr("checked", false);
   				}
   			}else{
   				$('.breakTimeClass').hide();
   				resetIntervalTime();
   			}
  		});
  		
  		$(".brkTimePicker").change(function() {	
			evaluateSlipHoursWithBreakTime();
		});
    });
	
	var xhr;
	(function( $ ) {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
      	 var ele_select= this.element;	
       	 var selected = this.element.children( ":selected" ),
         value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            tooltipClass: "ui-state-highlight"
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
		  	//alert("show all");
            ui.item.option.selected = true;
			
            this._trigger( "select", event, {
              item: ui.item.option
            });
            ele_select.trigger('change');
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .attr( "title", "Show All Items" )
          .tooltip()
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right" )
          .mousedown(function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .click(function() {
            input.focus();
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass last search string as value to search for, displaying last results
            input.autocomplete( "search", 'SHOWALL' );
          });
      },
 
      _source: function( request, response ) {
        //var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
		var ele_select= this.element;
		if(request.term=='SHOWALL'){
			response(ele_select.children( "option" ).map(function() {
          var text = $( this ).text();
		 var value= $( this ).val();
          //if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
		
		}else{
		var jsonRow = 'gettaskonsearch.cgi?srch='+request.term+'&closed=false';
		
		if(xhr) xhr.abort();
		xhr=$.getJSON(jsonRow,function(result){
			
			if(result){
				var html='<option value=""></option>';

				$.each(result, function(i,item)
				{
					html += '<option value="'+item.id+'">'+item.value+'</option>';
				});
				ele_select.html(html);
				
				
				response(ele_select.children( "option" ).map(function() {
          var text = $( this ).text();
		 var value= $( this ).val();
          //if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
				
				
			}
		});
       
	  } 
		
      },
 
      _removeIfInvalid: function( event, ui ) {
 
        // Selected an item, nothing to do
        if ( ui.item ) {

          return;
        }
 
        // Search for a match (case-insensitive)
       	var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
           var ele_select= this.element;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;	
			ele_select.trigger('change');
            return false;
          }
        });
 
        // Found a match, nothing to do
        if ( valid ) {
          return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.data( "ui-autocomplete" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
  })( jQuery );
 
	$(function() {
    	$( "#Task_ID" ).combobox();
  	});
</script>
<!-- END JAVASCRIPTS -->

</body>
<!-- END BODY -->
</html>